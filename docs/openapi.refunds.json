{
  "openapi": "3.0.3",
  "info": { "title": "Refunds API - Orders & Refunds", "version": "1.2.0", "description": "Orders listing and refund execution with approval flow. Supports listing by phone (REST) or order name (GraphQL). When listing by order name, GraphQL GIDs are mapped to numeric order and line item IDs so refund execution via REST works seamlessly. Line item prices in orders are net of discount_allocations. For auditing, see the Refund Stats API which records the last IP address (lastIp) and attempt history for executed refunds." },
  "servers": [{ "url": "http://localhost:6001" }],
  "tags": [ { "name": "Orders", "description": "Orders and refunds endpoints (tenant-scoped)" } ],
  "components": {
    "securitySchemes": { "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" } },
    "schemas": {
      "Error": { "type": "object", "properties": { "error": { "type": "string" } } },
      "RuleDecision": {
        "type": "object",
        "description": "Decision produced by refund rules middleware",
        "properties": {
          "outcome": { "type": "string", "enum": ["ALLOW", "DENY", "REQUIRE_APPROVAL"] },
          "reason": { "type": "string" },
          "limits": {
            "type": "object",
            "description": "Limits and observed values relevant to the decision. Common keys include: maxRefundPercent, maxRefundsPerDay, refundWindowDays, cashbackSpentThreshold, observedCashbackSpentCreditsRaw, observedCashbackSpentCredits, maxLifetimeRefundCount.",
            "additionalProperties": true
          },
          "matched": { "type": "array", "items": { "type": "string" } },
          "rulesVersion": { "type": "integer" },
          "ruleSetId": { "type": "string", "nullable": true }
        }
      },
      "PolicyDeniedError": {
        "type": "object",
        "properties": {
          "error": { "type": "string", "example": "Refund denied by policy" },
          "decision": { "$ref": "#/components/schemas/RuleDecision" }
        }
      },
      "OrderLineItem": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "quantity": { "type": "integer" }, "price": { "type": "string" } } },
      "OrderSummary": { "type": "object", "properties": { "id": { "type": "integer" }, "name": { "type": "string" }, "created_at": { "type": "string", "format": "date-time" }, "current_subtotal_price": { "type": "string" }, "financial_status": { "type": "string" }, "fulfillment_status": { "type": "string" }, "line_items": { "type": "array", "items": { "$ref": "#/components/schemas/OrderLineItem" } }, "customer": { "type": "object", "nullable": true, "properties": { "id": { "type": "integer" }, "first_name": { "type": "string" }, "last_name": { "type": "string" }, "email": { "type": "string", "format": "email" }, "phone": { "type": "string" } } } } },
      "GetOrdersResponse": { "type": "object", "properties": { "orders": { "type": "array", "items": { "$ref": "#/components/schemas/OrderSummary" } }, "nextPageInfo": { "type": "string", "nullable": true } } },
      "PartialRefundLineItem": { "type": "object", "required": ["lineItemId", "quantity"], "properties": { "lineItemId": { "type": "integer" }, "quantity": { "type": "integer" }, "amount": { "type": "number", "description": "Amount to refund for this line" }, "restock_type": { "type": "string", "enum": ["return", "no_restock", "cancel"] }, "locationId": { "type": "integer", "nullable": true } } },
  "RefundRequest": { "type": "object", "properties": { "phone": { "type": "string", "description": "Provide either orderId or phone. If orderId is omitted, phone is required to resolve the latest order." }, "orderId": { "type": "integer", "description": "Target order id; if provided, phone is optional" }, "amount": { "type": "number", "description": "Optional amount (stored when approval is required)" }, "lineItems": { "type": "array", "items": { "$ref": "#/components/schemas/PartialRefundLineItem" }, "description": "If present, performs partial refund; otherwise attempts full refund with cancellation" } } },
      "RefundResponse": { "type": "object", "properties": { "refund": { "type": "object" } } },
      "PendingApprovalResponse": { "type": "object", "properties": { "message": { "type": "string", "example": "Approval required. Request recorded." }, "pendingId": { "type": "string" }, "ruleDecision": { "$ref": "#/components/schemas/RuleDecision" } } },
      "ApproveOrDenyResponse": { "type": "object", "properties": { "message": { "type": "string" }, "refund": { "type": "object" }, "pendingId": { "type": "string" } } }
      ,
      "BulkPreviewItem": {
        "type": "object",
        "description": "One refund preview item to evaluate",
        "properties": {
          "phone": { "type": "string", "description": "Optional override phone for this item; defaults to top-level phone" },
          "orderId": { "type": "integer", "nullable": true },
          "amount": { "type": "number", "nullable": true, "description": "Requested amount; used for percent-based checks and captured if approval would be required" },
          "lineItems": { "type": "array", "items": { "$ref": "#/components/schemas/PartialRefundLineItem" }, "description": "If present, preview a partial refund decision" }
        }
      },
      "BulkPreviewRequest": {
        "type": "object",
        "required": ["items"],
        "properties": {
          "phone": { "type": "string", "description": "Default phone to resolve customer if an item.phone is not provided" },
          "items": { "type": "array", "items": { "$ref": "#/components/schemas/BulkPreviewItem" } }
        }
      },
      "PreviewCtxHints": {
        "type": "object",
        "description": "Useful context surfaced by the preview (subset of rule context)",
        "properties": {
          "orderId": { "type": "integer", "nullable": true },
          "rulesVersion": { "type": "integer" },
          "ruleSetId": { "type": "string", "nullable": true },
          "attemptsToday": { "type": "integer", "nullable": true },
          "daysSinceDelivery": { "type": "integer", "nullable": true },
          "totalCredits": { "type": "number", "nullable": true, "description": "Customer's total cashback credits from Flits (credits)" },
          "totalSpentCredits": { "type": "number", "nullable": true, "description": "Normalized spent cashback credits = abs(raw)/100 for display" },
          "totalSpentCreditsRaw": { "type": "number", "nullable": true, "description": "Raw spent cashback credits from Flits (e.g., paise) used for policy checks" }
        }
      },
      "BulkPreviewResult": {
        "type": "object",
        "properties": {
          "orderId": { "type": "integer", "nullable": true },
          "decision": { "$ref": "#/components/schemas/RuleDecision" },
          "requiresApproval": { "type": "boolean", "nullable": true },
          "ctxHints": { "$ref": "#/components/schemas/PreviewCtxHints" },
          "error": { "type": "string", "nullable": true }
        }
      },
      "BulkPreviewResponse": {
        "type": "object",
        "properties": {
          "results": { "type": "array", "items": { "$ref": "#/components/schemas/BulkPreviewResult" } }
        }
      }
    }
  },
  "paths": {
    "/api/v1/orders": {
      "get": {
        "security": [{ "bearerAuth": [] }],
        "tags": ["Orders"],
        "summary": "List orders by phone, order name, or date range",
        "parameters": [
          { "name": "phone", "in": "query", "schema": { "type": "string" }, "description": "If set, finds customer by phone and lists recent orders" },
          { "name": "orderName", "in": "query", "schema": { "type": "string" }, "description": "Shopify order name (e.g., #1234 or the exact display name). The API tries quoted and with/without # variants, and may fallback to order_number search." },
          { "name": "startDate", "in": "query", "schema": { "type": "string", "format": "date-time" } },
          { "name": "endDate", "in": "query", "schema": { "type": "string", "format": "date-time" } },
          { "name": "limit", "in": "query", "schema": { "type": "integer", "default": 10 } },
          { "name": "page_info", "in": "query", "schema": { "type": "string" }, "description": "Shopify page_info pagination token" }
        ],
        "responses": {
          "200": { "description": "OK", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/GetOrdersResponse" } } } },
          "400": { "description": "Missing phone, orderName or date range", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } },
          "404": { "description": "No customer found (phone case)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } },
          "500": { "description": "Server error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } }
        }
      }
    },
    "/api/v1/refund": {
      "post": {
        "security": [{ "bearerAuth": [] }],
        "tags": ["Orders"],
        "summary": "Create refund (full or partial) for latest or specific order",
        "description": "Passes through refund rules middleware: observe|warn|enforce. In enforce mode, DENY yields 403; REQUIRE_APPROVAL yields 202 with a pendingId.",
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RefundRequest" } } } },
        "responses": {
          "200": {
            "description": "Refund executed",
            "headers": {
              "X-Rule-Decision": { "description": "Present in warn mode; JSON-encoded RuleDecision", "schema": { "type": "string" } }
            },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RefundResponse" } } }
          },
          "202": {
            "description": "Approval required; request recorded",
            "headers": {
              "X-Rule-Decision": { "description": "Present in warn mode; JSON-encoded RuleDecision", "schema": { "type": "string" } }
            },
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PendingApprovalResponse" } } }
          },
          "403": { "description": "Denied by refund policy (enforce mode)", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PolicyDeniedError" } } } },
          "400": { "description": "Order already refunded or invalid transaction", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } },
          "404": { "description": "No orders for phone or target order not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } },
          "500": { "description": "Server error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } }
        }
      }
    },
    "/api/v1/refund/{pendingId}/approve": {
      "post": {
        "security": [{ "bearerAuth": [] }],
        "tags": ["Orders"],
        "summary": "Approve a pending refund and execute",
        "parameters": [ { "name": "pendingId", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "Refund executed successfully", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApproveOrDenyResponse" } } } },
          "400": { "description": "Already refunded or invalid transaction", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } },
          "404": { "description": "Pending not found or no orders", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } },
          "500": { "description": "Server error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } }
        }
      }
    },
    "/api/v1/refund/{pendingId}/deny": {
      "post": {
        "security": [{ "bearerAuth": [] }],
        "tags": ["Orders"],
        "summary": "Deny a pending refund",
        "parameters": [ { "name": "pendingId", "in": "path", "required": true, "schema": { "type": "string" } } ],
        "responses": {
          "200": { "description": "Pending refund denied", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ApproveOrDenyResponse" } } } },
          "404": { "description": "Pending not found", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } },
          "500": { "description": "Server error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } }
        }
      }
    }
    ,
    "/api/v1/refund/preview/bulk": {
      "post": {
        "security": [{ "bearerAuth": [] }],
        "tags": ["Orders"],
        "summary": "Bulk preview refund eligibility (dry run)",
        "description": "Dry-runs the refund rules engine for multiple items. No refunds are executed. Uses the same context builder (Shopify lookups) to provide realistic decisions.",
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BulkPreviewRequest" } } }
        },
        "responses": {
          "200": { "description": "Preview results for each item", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BulkPreviewResponse" } } } },
          "400": { "description": "Missing or invalid items array", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } },
          "500": { "description": "Server error while previewing", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } } }
        }
      }
    }
  }
}
